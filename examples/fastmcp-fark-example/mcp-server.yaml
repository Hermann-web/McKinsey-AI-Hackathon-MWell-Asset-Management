apiVersion: apps/v1
kind: Deployment
metadata:
  name: math-tools
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: math-tools
  template:
    metadata:
      labels:
        app: math-tools
    spec:
      containers:
      - name: math-tools
        image: python:3.11-slim
        command: ["python", "/app/run_server.py"]
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PORT
          value: "8000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: app-code
          mountPath: /app
      volumes:
      - name: app-code
        configMap:
          name: math-tools-code
          defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: math-tools-code
  namespace: default
data:
  main.py: |
    from typing import Annotated
    from fastmcp import FastMCP

    mcp = FastMCP("Math Tools ðŸ§®")

    @mcp.tool
    def add(
        a: Annotated[int, "First number to add"], 
        b: Annotated[int, "Second number to add"]
    ) -> int:
        """Add two integers and return the sum"""
        return a + b

    @mcp.tool
    def multiply(
        a: Annotated[float, "First number to multiply"],
        b: Annotated[float, "Second number to multiply"],
    ) -> float:
        """Multiply two numbers and return the product"""
        return a * b

    class MetricsUpdateOutput(BaseModel):
        inflation: float
        exchange_rate: float
        interest_rate: float

    # --------------------
    # IMPLEMENTATION FUNCTIONS
    # --------------------
    @mcp.tool
    def compute_metric_updates(
        inflation_pct: Annotated[float, "Percentage change in inflation"],
        exchange_rate_pct: Annotated[float, "Percentage change in exchange rate"],
        interest_rate_pct: Annotated[float, "Percentage change in interest rate"],
    ) -> MetricsUpdateOutput:
        """
        Compute updated economic metrics based on percentage changes and previous values.
        Defaults to baseline values if previous metrics are not provided.
        """
        previous_inflation = 0.2
        previous_exchange_rate = 0.7
        previous_interest_rate = 0.6
        
        # Apply percentage changes
        new_inflation = previous_inflation * (1 + inflation_pct / 100)
        new_exchange_rate = previous_exchange_rate * (1 + exchange_rate_pct / 100)
        new_interest_rate = previous_interest_rate * (1 + interest_rate_pct / 100)

        # Clamp values to realistic bounds
        return MetricsUpdateOutput(
            inflation=round(max(0, min(new_inflation, 20)), 2),
            exchange_rate=round(max(0.1, new_exchange_rate), 4),
            interest_rate=round(max(0, min(new_interest_rate, 15)), 2),
        )

    if __name__ == "__main__":
        mcp.run(transport="http", host="0.0.0.0", port=8000, path="/")
  run_server.py: |
    import sys
    import os
    sys.path.append('/app')
    
    # Install requirements
    os.system('pip install fastmcp')
    
    # Import and run the MCP server
    from main import mcp
    mcp.run(transport="http", host="0.0.0.0", port=8000, path="/")
  requirements.txt: |
    fastmcp
---
apiVersion: v1
kind: Service
metadata:
  name: math-tools
  namespace: default
spec:
  ports:
  - port: 8000
    targetPort: http
    name: http
  selector:
    app: math-tools
---
apiVersion: ark.mckinsey.com/v1alpha1
kind: MCPServer
metadata:
  name: math-tools
  namespace: default
spec:
  address:
    valueFrom:
      serviceRef:
        name: math-tools
  transport: http
  timeout: 30s
  description: "Actualisation tools MCP server"
